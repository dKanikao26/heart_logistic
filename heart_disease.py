# -*- coding: utf-8 -*-
"""heart_disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c8De2W4hJathX4GCQhhqckOp04-t4L5i
"""

import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('framingham.csv')

data.head()

data.shape

data.describe()

data.isnull().sum()

numericals = data.select_dtypes(include=['number'])

numericals.columns

numericals.drop(['male' , 'education' ,'currentSmoker' , 'cigsPerDay' , 'BPMeds' , 'prevalentStroke' ,'prevalentHyp', 'diabetes' , 'TenYearCHD'] , axis = 1 , inplace = True)

numericals

# Plot the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(numericals.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.tight_layout()
plt.show()

# Plot distplots in a grid
plt.figure(figsize=(15, 12))
for idx, col in enumerate(numericals.columns):
    plt.subplot(3, 3, idx + 1)  # adjust rows/cols if needed
    sns.histplot(numericals[col], kde=True)
    plt.title(f'Distribution of {col}')
    plt.tight_layout()

# Plot distplots in a grid
plt.figure(figsize=(15, 12))
for idx, col in enumerate(numericals.columns):
    plt.subplot(3, 3, idx + 1)  # adjust rows/cols if needed
    sns.boxplot(numericals[col])
    plt.title(f'Distribution of {col}')
    plt.tight_layout()



plt.figure(figsize=(15, 12))
for idx, col in enumerate(numericals.columns):
    plt.subplot(3, 3, idx + 1)  # adjust rows/cols if needed
    sns.boxplot(numericals[col])
    plt.title(f'Distribution of {col}')
    plt.tight_layout()

cat = data.select_dtypes(include=['object'])
cat

cat = data[['male' , 'education' ,'currentSmoker' , 'cigsPerDay' , 'BPMeds' , 'prevalentStroke' ,'prevalentHyp', 'diabetes' , 'TenYearCHD']]

cat

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(15, 12))

for idx, col in enumerate(cat.columns):
    plt.subplot(3, 3, idx + 1)  # Adjust grid size as needed
    sns.countplot(x=cat[col])
    plt.title(f'Distribution of {col}')
    plt.xticks(rotation=45)

plt.tight_layout()  # Call once after all subplots are made
plt.show()


# Load your data
df = pd.read_csv('framingham.csv')





from sklearn.model_selection import train_test_split

x = data.iloc[: , : -1]

x

y = data.iloc[: , -1]

y

x_train1 , x_test1 , y_train1 , y_test1 = train_test_split(x , y , test_size = 0.2 , random_state = 42)

x_train1

x_test1

"""Handle null values"""

data.isnull().sum()

data.isnull().mean()*100

# Get valid (non-null) indices after dropna
valid_index = x_train1.dropna(
    subset=['education', 'cigsPerDay', 'BPMeds', 'totChol', 'BMI', 'heartRate']
).index

# Apply to both X and y
x_train1 = x_train1.loc[valid_index]
y_train1 = y_train1.loc[valid_index]

x_train1.isnull().sum()

"""gulocose has 9.15%  null va;ues"""

x_train1.shape

y_train1.shape

subset = ['education' , 'cigsPerDay' , 'BPMeds' , 'totChol' , 'BMI']
plt.figure(figsize=(15, 12))
for idx, col in enumerate(subset):
    plt.subplot(3, 3, idx + 1)  # adjust rows/cols if needed
    sns.boxplot(x_train1[col])
    plt.title(f'Distribution of {col}')

subset = ['education' , 'cigsPerDay' , 'BPMeds' , 'totChol' , 'BMI']
plt.figure(figsize=(15, 12))
for idx, col in enumerate(subset):
    plt.subplot(3, 3, idx + 1)  # adjust rows/cols if needed
    sns.boxplot(data[col])
    plt.title(f'Distribution of {col}')

sns.boxplot(x_train1['glucose'])

sns.distplot(x_train1['glucose'])

x_train1.var()

x_train1.cov()['glucose']

from sklearn.impute import SimpleImputer

data.columns

col = ['male', 'age', 'education', 'currentSmoker', 'cigsPerDay', 'BPMeds',
       'prevalentStroke', 'prevalentHyp', 'diabetes', 'totChol', 'sysBP',
       'diaBP', 'BMI', 'heartRate', 'glucose']

impute = SimpleImputer(strategy='median' )
x_train1 = impute.fit_transform(x_train1)
x_test1 = impute.transform(x_test1)

x_train1 = pd.DataFrame(x_train1 , columns = col)

col1 = ['glucose']

x_train1

x_test1.columns

x_test1= pd.DataFrame(x_test1 , columns = col)

x_test1

x_train1.isnull().sum()

x_train1.cov()

x_train1.var()

data.columns

col = x_train1.columns

col

x

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(15, 12))
sunset = ['age', 'totChol', 'sysBP', 'diaBP', 'BMI', 'heartRate', 'glucose']

for idx, col in enumerate(sunset):
    plt.subplot(3, 3, idx + 1)
    sns.boxplot(x=x_train1[col])
    plt.title(f'Distribution of {col}')

plt.tight_layout()
plt.show()

outlier = ['totChol', 'sysBP', 'diaBP', 'BMI', 'heartRate', 'glucose']

for col in outlier:
  print(f'{col} : {x_train1[col].skew()}')

def outliers(x_train1 , col):
 q1 =  x_train1[col].quantile(0.25)
 q2 = x_train1[col].quantile(0.75)
 iqr = q2 - q1
 mini = q1 - 1.5*iqr
 maxi = q2 + 1.5*iqr
 return mini , maxi

mini , maxi = outliers(x_train1 , 'totChol')
mini , maxi

sns.displot(x_train1['totChol'])

for col in outlier:
  mini , maxi = outliers(x_train1 , col)
  x_train1[col] = x_train1[col].apply(lambda x : maxi if x > maxi else mini if x < mini else x)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(15, 12))
sunset = ['age', 'totChol', 'sysBP', 'diaBP', 'BMI', 'heartRate', 'glucose']

for idx, col in enumerate(sunset):
    plt.subplot(3, 3, idx + 1)
    sns.boxplot(x=x_train1[col])
    plt.title(f'Distribution of {col}')

plt.tight_layout()
plt.show()

x_train1['diabetes'].value_counts()

data[(data['glucose'] >200) & (data['diabetes'] == 1.0)].shape

sns.violinplot(x= data['diabetes'] , y = data['glucose'])

from sklearn.preprocessing import StandardScaler
s1 = StandardScaler()
x_train1 = s1.fit_transform(x_train1)
x_test1 = s1.transform(x_test1)

x_train1

col = ['male', 'age', 'education', 'currentSmoker', 'cigsPerDay', 'BPMeds',
       'prevalentStroke', 'prevalentHyp', 'diabetes', 'totChol', 'sysBP',
       'diaBP', 'BMI', 'heartRate', 'glucose']

x_train1 = pd.DataFrame(x_train1 , columns = col)

x_test1 = pd.DataFrame(x_test1 , columns = col)

x_test1



import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(15, 12))


for idx, col1 in enumerate(col):
    plt.subplot(3, 3, idx + 1)
    sns.distplot(x=x_train1[col])
    plt.title(f'Distribution of {col}')

plt.tight_layout()
plt.show()

import seaborn as sns
sns.scatterplot(x=data['glucose'], y=data['age'], hue=data['TenYearCHD'])

from sklearn.linear_model import LogisticRegression
l1 = LogisticRegression()
l1.fit(x_train1 , y_train1)

data['TenYearCHD'].value_counts()

x_train1.shape

y_train1.shape

l1.predict(x_test1)

from sklearn.metrics import accuracy_score , confusion_matrix , classification_report
print(accuracy_score(y_test1 , l1.predict(x_test1)))
print(confusion_matrix(y_test1 , l1.predict(x_test1)))
print(classification_report(y_test1 , l1.predict(x_test1)))







import pickle
with open('model1.pkl' , 'wb') as f:
  pickle.dump(l1 , f)

